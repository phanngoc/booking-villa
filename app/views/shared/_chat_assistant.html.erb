<!-- Chat button -->
<div class="fixed bottom-6 right-6 z-50" id="chat-button-container">
  <button id="chat-button" class="flex items-center justify-center p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all focus:outline-none">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
    </svg>
  </button>
</div>

<!-- Chat window -->
<div class="fixed bottom-6 right-6 z-50 w-[300px] h-[500px] bg-white rounded-lg shadow-xl flex flex-col overflow-hidden opacity-0 invisible transform translate-y-2 scale-95 transition-all duration-200" id="chat-window">
  <!-- Header -->
  <div class="bg-blue-600 px-4 py-3 flex items-center justify-between">
    <div class="flex items-center">
      <div class="bg-white p-1 rounded-full">
        <img src="https://cdn-icons-png.flaticon.com/512/9420/9420302.png" alt="Assistant" class="w-6 h-6">
      </div>
      <h3 class="text-white font-medium ml-2">Trợ lý Villa</h3>
    </div>
    <div class="flex items-center space-x-2">
      <button id="chat-settings" class="text-white opacity-70 hover:opacity-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
        </svg>
      </button>
      <button id="close-chat" class="text-white opacity-70 hover:opacity-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Chat messages -->
  <div class="flex-1 p-4 overflow-y-auto" id="chat-messages">
    <div class="flex items-start mb-4">
      <div class="flex-shrink-0 bg-gray-100 rounded-full p-1">
        <img src="https://cdn-icons-png.flaticon.com/512/9420/9420302.png" alt="Assistant" class="w-6 h-6">
      </div>
      <div class="ml-2 py-2 px-3 bg-gray-100 rounded-lg rounded-tl-none">
        <p class="text-sm text-gray-800">Chào mừng đến với Villa Booking! Tôi có thể giúp gì cho bạn?</p>
      </div>
    </div>
    
    <!-- Quick replies -->
    <div class="flex flex-wrap gap-2 justify-center mt-4">
      <button class="text-sm py-1 px-3 rounded-full bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors quick-reply">
        Đặt phòng
      </button>
      <button class="text-sm py-1 px-3 rounded-full bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors quick-reply">
        Giá cả
      </button>
      <button class="text-sm py-1 px-3 rounded-full bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors quick-reply">
        Tiện nghi
      </button>
    </div>
  </div>
  
  <!-- Input area -->
  <div class="p-3 border-t">
    <div class="relative">
      <input type="text" id="chat-input" placeholder="Nhập tin nhắn..." class="w-full rounded-full py-2 pl-4 pr-10 bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white">
      <button id="send-message" class="absolute right-1 top-1 p-1 text-blue-600 rounded-full hover:bg-blue-100 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
        </svg>
      </button>
    </div>
  </div>
</div>

<%= javascript_import_module_tag "channels" %>

<script type="module">
  document.addEventListener('DOMContentLoaded', function() {
    const chatButton = document.getElementById('chat-button');
    const closeChat = document.getElementById('close-chat');
    const chatWindow = document.getElementById('chat-window');
    const messagesContainer = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const sendMessage = document.getElementById('send-message');
    
    // Khởi tạo dữ liệu cho chat
    const chatSessionId = localStorage.getItem('chat-session-id') || createUUID();
    localStorage.setItem('chat-session-id', chatSessionId);
    
    // Lưu thread_id nếu đã có, nếu không để trống (sẽ được tạo sau)
    let chatThreadId = localStorage.getItem('chat-thread-id') || null;
    
    // Lấy trạng thái chat từ localStorage
    const chatState = localStorage.getItem('chat-state') || 'closed';
    
    // Nếu đã đăng nhập thì lấy thông tin user, nếu không thì tạo thông tin tạm
    const currentUser = {
      id: '<%= current_user&.id || "guest" %>', 
      name: '<%= current_user&.email || "Khách" %>'
    };
    
    if (chatState === 'open') {
      // Hiển thị chat nếu trạng thái là mở
      chatWindow.classList.remove('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
      chatButton.classList.add('opacity-0', 'invisible');
    }
    
    function toggleChat() {
      if (chatWindow.classList.contains('opacity-0')) {
        // Show chat window
        chatWindow.classList.remove('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
        chatButton.classList.add('opacity-0', 'invisible');
        localStorage.setItem('chat-state', 'open');
      } else {
        // Hide chat window
        chatWindow.classList.add('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
        chatButton.classList.remove('opacity-0', 'invisible');
        localStorage.setItem('chat-state', 'closed');
      }
    }
    
    chatButton.addEventListener('click', toggleChat);
    closeChat.addEventListener('click', toggleChat);
    
    // Đầu tiên, lấy hoặc tạo ChatThread cho người dùng
    // Nếu chưa có chat_thread_id, gọi API để lấy hoặc tạo mới
    if (!chatThreadId) {
      // Gọi API để tạo hoặc lấy chat thread hiện có
      fetch('/chats.json')
        .then(response => response.json())
        .then(data => {
          // Lưu thread_id vào localStorage
          chatThreadId = data.chat_thread.id;
          localStorage.setItem('chat-thread-id', chatThreadId);
          
          // Sau khi có thread_id, tạo kết nối WebSocket
          createChatThreadChannel(chatThreadId);
        })
        .catch(error => {
          console.error('Lỗi khi tạo chat thread:', error);
        });
    } else {
      // Nếu đã có thread_id, tạo kết nối WebSocket ngay
      createChatThreadChannel(chatThreadId);
    }
    
    // Hàm tạo kết nối WebSocket với ChatThreadChannel
    function createChatThreadChannel(threadId) {
      return import("<%= asset_path('channels/consumer.js') %>").then(module => {
        const consumer = module.default;
        
        return consumer.subscriptions.create({
          channel: "ChatThreadChannel",
          chat_thread_id: threadId
        }, {
          connected() {
            console.log(`Đã kết nối với ChatThreadChannel cho thread ${threadId}`);
          },
          
          disconnected() {
            console.log(`Đã ngắt kết nối từ ChatThreadChannel cho thread ${threadId}`);
          },
          
          received(data) {
            console.log("Nhận dữ liệu từ channel:", data);
            
            if (data.action === "new_message") {
              // Hiển thị tin nhắn mới
              displayMessage(data.content, data.sender);
            }
          }
        });
      });
    }
    
    // Hàm gửi tin nhắn qua socket
    function sendChatMessage() {
      const message = chatInput.value.trim();
      if (message && chatThreadId) {
        // Hiển thị tin nhắn của người dùng
        // displayMessage(message, 'user');
        
        // Tạo biến để lưu trữ tham chiếu đến kênh chat thread
        import("<%= asset_path('channels/consumer.js') %>").then(module => {
          const consumer = module.default;
          const chatChannel = consumer.subscriptions.create({
            channel: "ChatThreadChannel",
            chat_thread_id: chatThreadId
          }, {});
          
          // Gửi tin nhắn qua WebSocket
          chatChannel.perform('send_message', {
            content: message,
            chat_thread_id: chatThreadId,
            sender: currentUser.id === 'guest' ? 'guest' : 'user',
            user_id: currentUser.id,
            user_name: currentUser.name
          });
          
          // Hủy đăng ký kênh sau khi gửi (tránh tạo nhiều kết nối)
          setTimeout(() => {
            chatChannel.unsubscribe();
          }, 1000);
        });
        
        // Xóa nội dung input
        chatInput.value = '';
      } else if (!chatThreadId) {
        console.error("Chưa có chat thread ID");
        // Hiển thị thông báo cho người dùng
        displayMessage("Đang kết nối với hệ thống, vui lòng thử lại sau giây lát...", 'system');
      }
    }
    
    // Hàm hiển thị tin nhắn
    function displayMessage(content, senderType) {
      let messageHTML = '';
      
      if (senderType === 'user' || senderType === 'guest') {
        messageHTML = `
          <div class="flex items-start mb-4">
            <div class="ml-auto py-2 px-3 bg-blue-600 text-white rounded-lg rounded-tr-none">
              <p class="text-sm">${content}</p>
            </div>
          </div>
        `;
      } else if (senderType === 'system') {
        messageHTML = `
          <div class="flex items-start mb-4 justify-center">
            <div class="py-2 px-3 bg-yellow-100 text-yellow-800 rounded-lg text-center">
              <p class="text-sm">${content}</p>
            </div>
          </div>
        `;
      } else {
        messageHTML = `
          <div class="flex items-start mb-4">
            <div class="flex-shrink-0 bg-gray-100 rounded-full p-1">
              <img src="https://cdn-icons-png.flaticon.com/512/9420/9420302.png" alt="Assistant" class="w-6 h-6">
            </div>
            <div class="ml-2 py-2 px-3 bg-gray-100 rounded-lg rounded-tl-none">
              <p class="text-sm text-gray-800">${content}</p>
            </div>
          </div>
        `;
      }
      
      messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Hàm tạo UUID
    function createUUID() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
      });
    }
    
    // Event listener cho nút gửi và nhấn Enter
    sendMessage.addEventListener('click', sendChatMessage);
    
    chatInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        sendChatMessage();
      }
    });
    
    // Xử lý các nút trả lời nhanh
    document.querySelectorAll('.quick-reply').forEach(button => {
      button.addEventListener('click', function() {
        const quickReply = this.textContent.trim();
        chatInput.value = quickReply;
        sendChatMessage();
      });
    });
  });
</script> 